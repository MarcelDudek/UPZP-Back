// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TESTDATA_TESTDATA_H_
#define FLATBUFFERS_GENERATED_TESTDATA_TESTDATA_H_

#include "flatbuffers/flatbuffers.h"

namespace TestData {

struct Vec3;

struct Tester;
struct TesterBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Tester FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TesterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_SOME_INTEGER = 6,
    VT_SOME_STRING = 8
  };
  const TestData::Vec3 *pos() const {
    return GetStruct<const TestData::Vec3 *>(VT_POS);
  }
  int32_t some_integer() const {
    return GetField<int32_t>(VT_SOME_INTEGER, 123);
  }
  const flatbuffers::String *some_string() const {
    return GetPointer<const flatbuffers::String *>(VT_SOME_STRING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<TestData::Vec3>(verifier, VT_POS) &&
           VerifyField<int32_t>(verifier, VT_SOME_INTEGER) &&
           VerifyOffset(verifier, VT_SOME_STRING) &&
           verifier.VerifyString(some_string()) &&
           verifier.EndTable();
  }
};

struct TesterBuilder {
  typedef Tester Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const TestData::Vec3 *pos) {
    fbb_.AddStruct(Tester::VT_POS, pos);
  }
  void add_some_integer(int32_t some_integer) {
    fbb_.AddElement<int32_t>(Tester::VT_SOME_INTEGER, some_integer, 123);
  }
  void add_some_string(flatbuffers::Offset<flatbuffers::String> some_string) {
    fbb_.AddOffset(Tester::VT_SOME_STRING, some_string);
  }
  explicit TesterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Tester> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Tester>(end);
    return o;
  }
};

inline flatbuffers::Offset<Tester> CreateTester(
    flatbuffers::FlatBufferBuilder &_fbb,
    const TestData::Vec3 *pos = 0,
    int32_t some_integer = 123,
    flatbuffers::Offset<flatbuffers::String> some_string = 0) {
  TesterBuilder builder_(_fbb);
  builder_.add_some_string(some_string);
  builder_.add_some_integer(some_integer);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<Tester> CreateTesterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const TestData::Vec3 *pos = 0,
    int32_t some_integer = 123,
    const char *some_string = nullptr) {
  auto some_string__ = some_string ? _fbb.CreateString(some_string) : 0;
  return TestData::CreateTester(
      _fbb,
      pos,
      some_integer,
      some_string__);
}

inline const TestData::Tester *GetTester(const void *buf) {
  return flatbuffers::GetRoot<TestData::Tester>(buf);
}

inline const TestData::Tester *GetSizePrefixedTester(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<TestData::Tester>(buf);
}

inline bool VerifyTesterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestData::Tester>(nullptr);
}

inline bool VerifySizePrefixedTesterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestData::Tester>(nullptr);
}

inline void FinishTesterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TestData::Tester> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTesterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TestData::Tester> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace TestData

#endif  // FLATBUFFERS_GENERATED_TESTDATA_TESTDATA_H_
