// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONNECTION_UPZP_CONNECTION_H_
#define FLATBUFFERS_GENERATED_CONNECTION_UPZP_CONNECTION_H_

#include "flatbuffers/flatbuffers.h"

namespace Upzp {
namespace Connection {

struct FConnection;
struct FConnectionBuilder;

struct FPlayers;
struct FPlayersBuilder;

/// Player's input.
struct FConnection FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FConnectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ADDRESS = 6,
    VT_PORT = 8,
    VT_CONNECTED = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  uint32_t port() const {
    return GetField<uint32_t>(VT_PORT, 0);
  }
  bool connected() const {
    return GetField<uint8_t>(VT_CONNECTED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyField<uint32_t>(verifier, VT_PORT) &&
           VerifyField<uint8_t>(verifier, VT_CONNECTED) &&
           verifier.EndTable();
  }
};

struct FConnectionBuilder {
  typedef FConnection Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(FConnection::VT_ID, id, 0);
  }
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(FConnection::VT_ADDRESS, address);
  }
  void add_port(uint32_t port) {
    fbb_.AddElement<uint32_t>(FConnection::VT_PORT, port, 0);
  }
  void add_connected(bool connected) {
    fbb_.AddElement<uint8_t>(FConnection::VT_CONNECTED, static_cast<uint8_t>(connected), 0);
  }
  explicit FConnectionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FConnectionBuilder &operator=(const FConnectionBuilder &);
  flatbuffers::Offset<FConnection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FConnection>(end);
    return o;
  }
};

inline flatbuffers::Offset<FConnection> CreateFConnection(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    uint32_t port = 0,
    bool connected = false) {
  FConnectionBuilder builder_(_fbb);
  builder_.add_port(port);
  builder_.add_address(address);
  builder_.add_id(id);
  builder_.add_connected(connected);
  return builder_.Finish();
}

inline flatbuffers::Offset<FConnection> CreateFConnectionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *address = nullptr,
    uint32_t port = 0,
    bool connected = false) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return Upzp::Connection::CreateFConnection(
      _fbb,
      id,
      address__,
      port,
      connected);
}

struct FPlayers FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FPlayersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Upzp::Connection::FConnection>> *players() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Upzp::Connection::FConnection>> *>(VT_PLAYERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct FPlayersBuilder {
  typedef FPlayers Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_players(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Upzp::Connection::FConnection>>> players) {
    fbb_.AddOffset(FPlayers::VT_PLAYERS, players);
  }
  explicit FPlayersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FPlayersBuilder &operator=(const FPlayersBuilder &);
  flatbuffers::Offset<FPlayers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FPlayers>(end);
    return o;
  }
};

inline flatbuffers::Offset<FPlayers> CreateFPlayers(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Upzp::Connection::FConnection>>> players = 0) {
  FPlayersBuilder builder_(_fbb);
  builder_.add_players(players);
  return builder_.Finish();
}

inline flatbuffers::Offset<FPlayers> CreateFPlayersDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Upzp::Connection::FConnection>> *players = nullptr) {
  auto players__ = players ? _fbb.CreateVector<flatbuffers::Offset<Upzp::Connection::FConnection>>(*players) : 0;
  return Upzp::Connection::CreateFPlayers(
      _fbb,
      players__);
}

inline const Upzp::Connection::FPlayers *GetFPlayers(const void *buf) {
  return flatbuffers::GetRoot<Upzp::Connection::FPlayers>(buf);
}

inline const Upzp::Connection::FPlayers *GetSizePrefixedFPlayers(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Upzp::Connection::FPlayers>(buf);
}

inline bool VerifyFPlayersBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Upzp::Connection::FPlayers>(nullptr);
}

inline bool VerifySizePrefixedFPlayersBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Upzp::Connection::FPlayers>(nullptr);
}

inline void FinishFPlayersBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Upzp::Connection::FPlayers> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFPlayersBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Upzp::Connection::FPlayers> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Connection
}  // namespace Upzp

#endif  // FLATBUFFERS_GENERATED_CONNECTION_UPZP_CONNECTION_H_
